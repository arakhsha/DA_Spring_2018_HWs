stat %>% group_by(team) %>% summarise(draws = sum(final == "D") / n()) %>% arrange(desc( draws))
#Highest Draws
stat %>% group_by(team) %>% summarise(draws = sum(final == "D") / n() * 100) %>% arrange(desc( draws))
homeStat %>% group_by(team) %>% summarise(losses = sum(final == "L") / n()) %>% arrange(losses)
homeStat = data %>%
select(Season, tier, team = home, opp = visitor, GF = hgoal, GA = vgoal, result) %>% mutate(reslut = homeTeamResult(result))
awayStat = data %>%
select(Season, tier, team = visitor, opp = home, GF = vgoal, GA = hgoal, result) %>% mutate(result = awayTeamResult(result))
stat = rbind(homeStat, awayStat, by = 'team') %>% select(Season, tier, team, opp, GA, GF, result )
View(homeStat)
homeStat = data %>%
select(Season, tier, team = home, opp = visitor, GF = hgoal, GA = vgoal, result) %>% mutate(final = homeTeamResult(result))
awayStat = data %>%
select(Season, tier, team = visitor, opp = home, GF = vgoal, GA = hgoal, result) %>% mutate(final = awayTeamResult(result))
stat = rbind(homeStat, awayStat, by = 'team') %>% select(Season, tier, team, opp, GA, GF, final )
stat$GA = as.integer(stat$GA)
stat$GF = as.integer(stat$GF)
#Bus Defense strat
#Least Goals
stat %>% group_by(team) %>% summarise(goals = sum(GA + GF) / n()) %>% arrange(goals)
#Highest Draws
stat %>% group_by(team) %>% summarise(draws = sum(final == "D") / n() * 100) %>% arrange(desc( draws))
#Unfathable Castle!!!
homeStat %>% group_by(team) %>% summarise(losses = sum(final == "L") / n()) %>% arrange(losses)
homeStat = data %>%
select(Season, tier, team = home, opp = visitor, GF = hgoal, GA = vgoal, result) %>% mutate(final = homeTeamResult(result))
homeStat %>% select(-result)
colnames(homeStat)[colnames(homeStat) == 'final'] = 'result'
View(homeStat)
homeStat %>% select(-result)
homeStat = data %>%
select(Season, tier, team = home, opp = visitor, GF = hgoal, GA = vgoal, result) %>% mutate(final = homeTeamResult(result))
homeStat %>% select(-result)
homeStat = homeStat %>% select(-result)
View(homeStat)
colnames(homeStat)[colnames(homeStat) == 'final'] = 'result'
awayStat = data %>%
select(Season, tier, team = visitor, opp = home, GF = vgoal, GA = hgoal, result) %>% mutate(final = awayTeamResult(result))
awayStat = awayStat %>% select(-result)
colnames(awayStat)[colnames(awayStat) == 'final'] = 'result'
stat = rbind(homeStat, awayStat, by = 'team')
stat$GA = as.integer(stat$GA)
stat$GF = as.integer(stat$GF)
View(stat)
View(homeStat)
View(awayStat)
#Bus Defense strat
#Least Goals
stat %>% group_by(team) %>% summarise(goals = sum(GA + GF) / n()) %>% arrange(goals)
#Highest Draws
stat %>% group_by(team) %>% summarise(draws = sum(result == "D") / n() * 100) %>% arrange(desc( draws))
#Unfathable Castle!!!
homeStat %>% group_by(team) %>% summarise(losses = sum(result == "L") / n()) %>% arrange(losses)
#Bus Defense strat
#Least Goals
stat %>% group_by(team) %>% summarise(goals = sum(GA + GF), games = n()) %>% mutate(per = goals / games) %>%
arrange(per)
#Bus Defense strat
#Least Goals
stat %>% group_by(team) %>% summarise(goals = sum(GA + GF), games = n()) %>% mutate(per = goals / games) %>%
arrange(desc(per))
#Bus Defense strat
#Least Goals
stat %>% group_by(team) %>% summarise(goals = sum(GA + GF), games = n()) %>% mutate(per = goals / games) %>%
arrange(per)
#Highest Draws
stat %>% group_by(team) %>% summarise(draws = sum(result == "D"), games = n()) %>%
mutate(perc = draws / games) %>% arrange(desc( perc))
#Unfathable Castle!!!
homeStat %>% group_by(team) %>% summarise(losses = sum(result == "L") / n()) %>% arrange(losses)
#Unfathable Castle!!!
homeStat %>% group_by(team) %>% summarise(losses = sum(result == "L"),  games = n()) %>%
mutate(perc = losses / games) %>% arrange(losses)
#Unfathable Castle!!!
homeStat %>% group_by(team) %>% summarise(losses = sum(result == "L"),  games = n()) %>%
mutate(perc = losses / games) %>% arrange(perc)
#Unfathable Castle!!!
homeStat %>% group_by(team) %>% summarise(losses = sum(result == "L"),  games = n()) %>%
mutate(perc = losses / games) %>% arrange(perc)
#Unfathable Castle!!!
homeStat %>% group_by(Season, team) %>% summarise(losses = sum(result == "L"),  games = n()) %>%
mutate(perc = losses / games) %>% arrange(perc)
#Highest Draws
stat %>% group_by(team) %>% summarise(draws = sum(result == "D"), games = n()) %>%
mutate(perc = draws / games) %>% arrange(desc( perc)) -> drawStat
library(highcharter)
drawStat %>% slice(1:20) %>% hchart(type = 'column', hcaes(x = team, y = perc))
stat %>% group_by(Season, Team) %>%
summarise(wins = sum(result == "W"),
score = wins * 3 + sum(result == "D"))
stat %>% group_by(Season, team) %>%
summarise(wins = sum(result == "W"),
score = wins * 3 + sum(result == "D"))
stat %>% group_by(Season, team) %>%
summarise(wins = sum(result == "W"),
score = wins * 3 + sum(result == "D")) %>%
mutate(rank = percent_rank(score))
stat %>% group_by(Season, team, tier) %>%
summarise(wins = sum(result == "W"),
score = wins * 3 + sum(result == "D")) %>%
mutate(rank = percent_rank(score)) %>%
filter
stat %>% group_by(Season, team, tier) %>%
summarise(wins = sum(result == "W"),
score = wins * 3 + sum(result == "D")) %>%
mutate(rank = percent_rank(score)) -> winStat
winStat %>% group_by(Season, tier) %>%
mutate(
totalWins = sum(wins),
topWins = sum(. %>% filter(rank < 0.2) %>% .$wins)
)
winStat %>% group_by(Season, tier) %>%
mutate(
totalWins = sum(wins),
topWins = sum(. %>% filter(rank < 0.2) %>% select(wins))
)
stat %>%
group_by(team) %>%
summarise(wins = sum(result == "W")) %>%
arrange(desc(wins)) %>%
mutate(totalWins = cumsum(wins)) -> winStat
View(winStat)
winStat$per = round(100 * winStat$totalWins / sum(winStat$wins))
View(winStat)
hchart(winStat, type = "scatter", hcaes(x = team, y = per))
hchart(winStat, type = "line", hcaes(x = team, y = per))
hchart(winStat, type = "scatter", hcaes(x = team, y = per))
stat = stat %>% mutate(GD = GF - GA)
#Bus Defense strat
#Least Goals
stat %>% group_by(team) %>% summarise(goals = sum(GA + GF), games = n()) %>% mutate(per = goals / games) %>%
arrange(per)
#Highest Draws
stat %>% group_by(team) %>% summarise(draws = sum(result == "D"), games = n()) %>%
mutate(perc = draws / games) %>% arrange(desc( perc)) -> drawStat
drawStat %>% slice(1:20) %>% hchart(type = 'column', hcaes(x = team, y = perc))
#Unfathable Castle!!!
homeStat %>% group_by(Season, team) %>% summarise(losses = sum(result == "L"),  games = n()) %>%
mutate(perc = losses / games) %>% arrange(perc)
#80-20 for wins?
stat %>%
group_by(team) %>%
summarise(wins = sum(result == "W")) %>%
arrange(desc(wins)) %>%
mutate(totalWins = cumsum(wins)) -> winStat
winStat$per = round(100 * winStat$totalWins / sum(winStat$wins))
hchart(winStat, type = "scatter", hcaes(x = team, y = per))
stat %>% group_by(Season, tier, team) %>%
summarise(score = wins * 3 + sum(result == "D")) %>%
top_n(wt = score)
stat %>% group_by(Season, tier, team) %>%
summarise(score = sum(result == "W") * 3 + sum(result == "D")) %>%
top_n(wt = score)
stat %>% group_by(Season, tier, team) %>%
summarise(score = sum(result == "W") * 3 + sum(result == "D")) %>%
top_n(wt = score, 1)
stat %>% filter(tier == 1) %>% group_by(Season, team) %>%
summarise(score = sum(result == "W") * 3 + sum(result == "D")) %>%
top_n(wt = score, 1)
hchart(type = "line", x = Season, y = score, labels = team)
hchart(type = "line", x = Season, y = score)
hchart(type = "line", hcaes(x = Season, y = score))
hchart(stat, type = "line", hcaes(x = Season, y = score))
hchart(championStat, type = "line", hcaes(x = Season, y = score))
stat %>% filter(tier == 1) %>% group_by(Season, team) %>%
summarise(score = sum(result == "W") * 3 + sum(result == "D")) %>%
top_n(wt = score, 1) -> championStat
hchart(championStat, type = "line", hcaes(x = Season, y = score))
hchart(championStat, type = "line", hcaes(x = Season, y = score), tooltip_table(Seasn, team))
hchart(championStat, type = "line", hcaes(x = Season, y = score), tooltip_table(Season, team))
?hchart
hchart(championStat, type = "line", hcaes(x = Season, y = score), tooltip_table(Season, team))
hchart(championStat, type = "line", hcaes(x = Season, y = score))
hchart(championStat, type = "line", hcaes(x = Season, y = score, name = team))
stat %>% filter(tier == 1) %>% group_by(Season, team) %>%
summarise(score = sum(result == "W") * 3 + sum(result == "D")) %>%
top_n(wt = score, 1) -> championStat
hchart(championStat, type = "line", hcaes(x = Season, y = score, name = team))
View(championStat)
hchart(championStat, type = "line", hcaes(x = Season, y = score, team))
hchart(championStat, type = "line", hcaes(x = Season, y = score, name = team))
View(championStat)
str(championStat)
championStat$Season = as.integer(championStat$Season)
hchart(championStat, type = "line", hcaes(x = Season, y = score, name = team))
hchart(championStat, type = "line", hcaes(x = Season, y = score))
, name = team
hchart(championStat, type = "line", hcaes(x = Season, y = score, name = team))
library('dplyr')
library('readr')
library('ggplot2')
library('ggthemes')
library('ggrepel')
#setting theme
theme_set(theme_gdocs())
#reading data
setwd(dirname(parent.frame(2)$ofile))
dirname(parent.frame(2)$ofile)
dirname(parent.frame(2)$ofile)
dirname(sys.frame(1)$ofile)
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files <- Filter(Negate(is.null), frame_files)
PATH <- dirname(frame_files[[length(frame_files)]])
#reading data
setwd(dirname(parent.frame(2)$ofile))
mobile = read_csv('mobile_data.csv')
#correcting data
dimensions = data.frame(thickness = mobile$dim_thickness,
length = mobile$dim_length,
breadth = mobile$dim_breadth)
mobile$dim_thickness = pmin(dimensions$thickness, dimensions$length, dimensions$breadth)
mobile$dim_length = pmax(dimensions$thickness, dimensions$length, dimensions$breadth)
mobile$dim_breadth = dimensions$thickness + dimensions$length + dimensions$breadth - mobile$dim_length - mobile$dim_thickness
library('dplyr')
library('readr')
library('ggplot2')
library('ggthemes')
library('ggrepel')
#setting theme
theme_set(theme_gdocs())
#reading data
setwd(dirname(parent.frame(2)$ofile))
mobile = read_csv('mobile_data.csv')
#correcting data
dimensions = data.frame(thickness = mobile$dim_thickness,
length = mobile$dim_length,
breadth = mobile$dim_breadth)
mobile$dim_thickness = pmin(dimensions$thickness, dimensions$length, dimensions$breadth)
mobile$dim_length = pmax(dimensions$thickness, dimensions$length, dimensions$breadth)
mobile$dim_breadth = dimensions$thickness + dimensions$length + dimensions$breadth - mobile$dim_length - mobile$dim_thickness
#Q1
modelStat = mobile %>% group_by(company) %>%
summarise(count = n())
modelStat = modelStat[order(modelStat$count, decreasing = TRUE), ]
library('dplyr')
library('readr')
library('ggplot2')
library('ggthemes')
library('ggrepel')
#setting theme
theme_set(theme_gdocs())
#reading data
setwd(dirname(parent.frame(2)$ofile))
mobile = read_csv('mobile_data.csv')
#correcting data
dimensions = data.frame(thickness = mobile$dim_thickness,
length = mobile$dim_length,
breadth = mobile$dim_breadth)
mobile$dim_thickness = pmin(dimensions$thickness, dimensions$length, dimensions$breadth)
mobile$dim_length = pmax(dimensions$thickness, dimensions$length, dimensions$breadth)
mobile$dim_thickness = pmin(dimensions$thickness, dimensions$length, dimensions$breadth)
mobile$dim_length = pmax(dimensions$thickness, dimensions$length, dimensions$breadth)
mobile$dim_breadth = dimensions$thickness + dimensions$length + dimensions$breadth - mobile$dim_length - mobile$dim_thickness
source('~/Documents/University/Term4 - 97spring/Data Analysis/HW/HW2/HW2 95109315 Amin Rakhsha/HW2.R', echo=TRUE)
#Q1
modelStat = mobile %>% group_by(company) %>%
summarise(count = n())
modelStat = modelStat[order(modelStat$count, decreasing = TRUE), ]
modelStat[1, ]$company
ggplot(modelStat[1:20,], aes(x = reorder(company, count), y = count)) +
geom_bar(stat = 'identity', fill = "dodgerblue4") +
labs(y = 'Number of models', x = '', title = 'Companies with Highest Device Models') +
coord_flip()
#Q2
ggplot(mobile, aes(x = year, y = dim_length)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(y = 'Length', x = 'Year', title = 'Length vs. Year')
ggplot(mobile, aes(x = year, y = dim_breadth)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(y = 'Breadth', x = 'Year', title = 'Breadth vs. Year')
ggplot(mobile, aes(x = year, y = dim_thickness)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(y = 'Thickness', x = 'Year', title = 'Thickness vs. Year')
ggplot(mobile, aes(x = year, y = cam_px)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(y = 'Camera Resolution', x = 'Year', title = 'Camera Resolution vs. Year')
#Q3
priceBySimAndLTE = mobile %>% group_by(LTE, sim_no) %>%
summarise(avgPrice = mean(price, na.rm = TRUE))
ggplot(priceBySimAndLTE, aes(x = sim_no, y = avgPrice)) +
geom_bar(aes(fill = LTE), stat = 'identity', position = 'dodge') +
labs(y = 'Average Price', x = 'Number of Sims', title = 'Average Price by LTE and Number of Sims')
#Q4
ggplot(mobile[which(mobile$year == 2017), ], aes(x = audio_jack, y = dim_thickness)) +
geom_boxplot() +
labs(y = 'Thickness', x = 'Audio Jack', title = 'Thikness of Devices With And Without Audio Jack')
#Q5
mobile = mobile %>% mutate(ppi = sqrt(px_row^2 + px_col^2) / display_size)
ppiStat = mobile %>% group_by(year) %>% summarise(avgPPI = mean(ppi, na.rm = TRUE))
ggplot(ppiStat, aes(x = year, y = avgPPI)) +
geom_line(color = "dodgerblue4") + geom_point(color = "dodgerblue4") +
labs(y = 'Average PPI', x = 'Year', title = 'Average PPI vs Year')
#Q6
gooshkubiat = function(x) {
kolofty = x$dim_thickness / (x$dim_length * x$dim_breadth)
density = x$weight / (x$dim_length * x$dim_breadth)
result = 2 * kolofty + density
result[which(x$dim_length < 65)] = rep(0, length(which(x$dim_length < 65)))
result[which(!is.finite(result))] = rep(NaN, length(which(!is.finite(result))))
return(result)
}
mobileWithGooshkubiat = mobile
mobileWithGooshkubiat$gooshkubiat = gooshkubiat(mobile)
topGooshkub = mobileWithGooshkubiat %>% top_n(10, gooshkubiat)
ggplot(topGooshkub, aes(x = reorder(paste(company, device), gooshkubiat), y = gooshkubiat)) +
geom_bar(stat = 'identity', fill = "springgreen4") +
labs(y = 'Gooshkubiat', x = '', title = 'Top 10 Gooshkubs') +
coord_flip()
#Q7
dinsity = function(x) {
result = x$weight / (x$dim_length * x$dim_breadth *x$dim_thickness) * 1000
result[which(!is.finite(result))] = rep(NaN, length(which(!is.finite(result))))
return(result)
}
mobile$density = dinsity(mobile)
mobile[which(mobile$density < 1),]$device
ggplot(mobile[which(!is.nan(mobile$density)), ],
aes(x = density)) + xlim(0, 4) +
geom_histogram(aes(fill = density < 1), binwidth = 0.2, center = 0.1) +
labs(y = 'Frequency', x = 'Density', title = 'Weight vs. Volume', fill = "Floats on Water")
#Q8
ggplot(mobile, aes(x = battery_mah, y = weight)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
ylim(0, 1000) +
labs(y = 'Weight', x = 'Battery Capacity', title = 'Weight vs. Battery Capacity')
cor(mobile$battery_mah, mobile$weight, use = "complete.obs")
#Q9
samsungFlagship = mobile %>% filter(company == "Samsung") %>% na.omit() %>%
group_by(year) %>% summarise(flagship = device[which.max(price)[1]], price = price[which.max(price)[1]])
ggplot(samsungFlagship, aes(x = year, y = price, label = flagship)) +
geom_line(color = "orangered") +
geom_point(color = "red", size = 2) +
geom_label_repel(size = 2, box.padding = 0.25) +
ylim(0, 1000) +
labs(y = 'Price', x = 'Year', title = 'Samsung Flagships Prices')
#Q10
densityStat = mobile %>% group_by(company) %>% summarise(avgDensity = mean(density, na.rm = TRUE))
densityStat = union(densityStat %>% top_n(5, avgDensity) %>% mutate(type = "Highest"),
densityStat %>% top_n(5, -avgDensity)%>% mutate(type = "Lowest"))
densityStat = densityStat[order(densityStat$avgDensity),]
ggplot(densityStat, aes(x = reorder(company, avgDensity), y = avgDensity)) +
geom_bar(stat = "identity", fill = "dodgerblue4") +
coord_flip() +
labs(y = 'Density', x = '', title = "Companies with highest and lowest densities") +
facet_grid(type~., scales="free")
library('dplyr')
library('readr')
library('ggplot2')
library('ggthemes')
library('ggrepel')
#setting theme
theme_set(theme_gdocs())
#reading data
setwd(dirname(parent.frame(2)$ofile))
modelStat = mobile %>% group_by(company) %>%
summarise(count = n())
modelStat = modelStat[order(modelStat$count, decreasing = TRUE), ]
modelStat[1, ]$company
ggplot(modelStat[1:20,], aes(x = reorder(company, count), y = count)) +
geom_bar(stat = 'identity', fill = "dodgerblue4") +
labs(y = 'Number of models', x = '', title = 'Companies with Highest Device Models') +
coord_flip()
ggplot(mobile, aes(x = year, y = dim_length)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(y = 'Length', x = 'Year', title = 'Length vs. Year')
ggplot(mobile, aes(x = year, y = dim_breadth)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(y = 'Breadth', x = 'Year', title = 'Breadth vs. Year')
ggplot(mobile, aes(x = year, y = dim_thickness)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(y = 'Thickness', x = 'Year', title = 'Thickness vs. Year')
ggplot(mobile, aes(x = year, y = cam_px)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(y = 'Camera Resolution', x = 'Year', title = 'Camera Resolution vs. Year')
priceBySimAndLTE = mobile %>% group_by(LTE, sim_no) %>%
summarise(avgPrice = mean(price, na.rm = TRUE))
ggplot(priceBySimAndLTE, aes(x = sim_no, y = avgPrice)) +
geom_bar(aes(fill = LTE), stat = 'identity', position = 'dodge') +
labs(y = 'Average Price', x = 'Number of Sims', title = 'Average Price by LTE and Number of Sims')
ggplot(mobile[which(mobile$year == 2017), ], aes(x = audio_jack, y = dim_thickness)) +
geom_boxplot() +
labs(y = 'Thickness', x = 'Audio Jack', title = 'Thikness of Devices With And Without Audio Jack')
mobile = mobile %>% mutate(ppi = sqrt(px_row^2 + px_col^2) / display_size)
ppiStat = mobile %>% group_by(year) %>% summarise(avgPPI = mean(ppi, na.rm = TRUE))
ggplot(ppiStat, aes(x = year, y = avgPPI)) +
geom_line(color = "dodgerblue4") + geom_point(color = "dodgerblue4") +
labs(y = 'Average PPI', x = 'Year', title = 'Average PPI vs Year')
gooshkubiat = function(x) {
kolofty = x$dim_thickness / (x$dim_length * x$dim_breadth)
density = x$weight / (x$dim_length * x$dim_breadth)
result = 2 * kolofty + density
result[which(x$dim_length < 65)] = rep(0, length(which(x$dim_length < 65)))
result[which(!is.finite(result))] = rep(NaN, length(which(!is.finite(result))))
return(result)
}
mobileWithGooshkubiat = mobile
mobileWithGooshkubiat$gooshkubiat = gooshkubiat(mobile)
topGooshkub = mobileWithGooshkubiat %>% top_n(10, gooshkubiat)
ggplot(topGooshkub, aes(x = reorder(paste(company, device), gooshkubiat), y = gooshkubiat)) +
geom_bar(stat = 'identity', fill = "springgreen4") +
labs(y = 'Gooshkubiat', x = '', title = 'Top 10 Gooshkubs') +
coord_flip()
dinsity = function(x) {
result = x$weight / (x$dim_length * x$dim_breadth *x$dim_thickness) * 1000
result[which(!is.finite(result))] = rep(NaN, length(which(!is.finite(result))))
return(result)
}
mobile$density = dinsity(mobile)
mobile[which(mobile$density < 1),]$device
ggplot(mobile[which(!is.nan(mobile$density)), ],
aes(x = density)) + xlim(0, 4) +
geom_histogram(aes(fill = density < 1), binwidth = 0.2, center = 0.1) +
labs(y = 'Frequency', x = 'Density', title = 'Weight vs. Volume', fill = "Floats on Water")
ggplot(mobile, aes(x = battery_mah, y = weight)) +
geom_point(color = "dodgerblue", alpha = 0.3) +
ylim(0, 1000) +
labs(y = 'Weight', x = 'Battery Capacity', title = 'Weight vs. Battery Capacity')
cor(mobile$battery_mah, mobile$weight, use = "complete.obs")
samsungFlagship = mobile %>% filter(company == "Samsung") %>% na.omit() %>%
group_by(year) %>% summarise(flagship = device[which.max(price)[1]], price = price[which.max(price)[1]])
ggplot(samsungFlagship, aes(x = year, y = price, label = flagship)) +
geom_line(color = "orangered") +
geom_point(color = "red", size = 2) +
geom_label_repel(size = 2, box.padding = 0.25) +
ylim(0, 1000) +
labs(y = 'Price', x = 'Year', title = 'Samsung Flagships Prices')
densityStat = mobile %>% group_by(company) %>% summarise(avgDensity = mean(density, na.rm = TRUE))
densityStat = union(densityStat %>% top_n(5, avgDensity) %>% mutate(type = "Highest"),
densityStat %>% top_n(5, -avgDensity)%>% mutate(type = "Lowest"))
densityStat = densityStat[order(densityStat$avgDensity),]
ggplot(densityStat, aes(x = reorder(company, avgDensity), y = avgDensity)) +
geom_bar(stat = "identity", fill = "dodgerblue4") +
coord_flip() +
labs(y = 'Density', x = '', title = "Companies with highest and lowest densities") +
facet_grid(type~., scales="free")
topBrands = c("HTC", "LG", "Sony")
batteryStat = mobile %>% filter(company %in% topBrands, price < 1500) %>%  group_by(company, year) %>%
summarise(avgBattery = mean(battery_mah, na.rm = TRUE), count = n()) %>% na.omit()
ggplot(batteryStat, aes(x = year, y = avgBattery, group = company, color = company)) +
geom_point(alpha = 0.3) + geom_line(alpha = 0.3) + geom_smooth(method = "lm", se = FALSE) +
xlim(2010, 2017) +
labs(y = 'Average Battery', x = 'Year', title = "Average Battery Capacity by Year", color = "Company")
samsung = mobile %>% filter(company == 'Samsung', !is.na(os_type))
ggplot(samsung, aes(x = year)) +
geom_bar(aes(fill = os_type), position = 'fill') +
labs(y = '', x = 'Year', title = "OS used by Samsung", fill = "OS type")
View(mobileWithGooshkubiat)
View(mobile)
#Q4
ggplot(mobile[which(mobile$year == 2017), ], aes(x = audio_jack, y = dim_thickness)) +
geom_boxplot(fill = audio_jack) +
labs(y = 'Thickness', x = 'Audio Jack', title = 'Thikness of Devices With And Without Audio Jack')
#Q4
ggplot(mobile[which(mobile$year == 2017), ], aes(x = audio_jack, y = dim_thickness)) +
geom_boxplot(aes(fill = audio_jack)) +
labs(y = 'Thickness', x = 'Audio Jack', title = 'Thikness of Devices With And Without Audio Jack')
ggplot(ppiStat, aes(x = year, y = avgPPI)) +
geom_line(color = "dodgerblue4") + geom_point(color = "dodgerblue4") +
labs(y = 'Average PPI', x = 'Year', title = 'Average PPI vs Year') +
guides(fill=FALSE)
#Q4
ggplot(mobile[which(mobile$year == 2017), ], aes(x = audio_jack, y = dim_thickness)) +
geom_boxplot(aes(fill = audio_jack)) +
labs(y = 'Thickness', x = 'Audio Jack', title = 'Thikness of Devices With And Without Audio Jack') +
guides(fill=FALSE)
mobile %>% top_n(wt = ppi, n = 1)
paste(topPPI$company, topPPI$device)
topPPI = mobile %>% top_n(wt = ppi, n = 1)
paste(topPPI$company, topPPI$device)
paste(topPPI$company, topPPI$device, "with ", topPPI$ppi, "ppi")
# mobile[which(mobile$density < 1),]$device
mobile %>% filter(dinsity < 1)
# mobile[which(mobile$density < 1),]$device
mobile %>% filter(dinsity < 1)
mobile$density = dinsity(mobile)
# mobile[which(mobile$density < 1),]$device
mobile %>% filter(dinsity < 1)
# mobile[which(mobile$density < 1),]$device
mobile %>% filter(density < 1)
# mobile[which(mobile$density < 1),]$device
mobile %>% filter(density < 1) %>% select(company, device, density)
mobile %>% filter(density < 1) %>% select(company, device, density) %>% arrange(density)
library('knitr')
kable(mobile %>% filter(density < 1) %>% select(company, device, density)) %>%
kable_styling() %>%
scroll_box(width = "500px", height = "200px")
kable(mobile %>% filter(density < 1) %>% select(company, device, density)) %>%
scroll_box(width = "500px", height = "200px")
mobile$dim_length = pmax(dimensions$thickness, dimensions$length, dimensions$breadth)
install.packages("kableExtra")
library(kableExtra)
kable(mobile %>% filter(density < 1) %>% select(company, device, density)) %>%
scroll_box(width = "500px", height = "200px")
dinsity = function(x) {
result = x$weight / (x$dim_length * x$dim_breadth *x$dim_thickness) * 1000
result[which(!is.finite(result))] = rep(NaN, length(which(!is.finite(result))))
return(result)
}
mobile$density = dinsity(mobile)
library(knitr)
library(kableExtra)
kable(mobile %>% filter(density < 1) %>% select(company, device, density), "html") %>%
kable_styling() %>%
scroll_box(width = "500px", height = "200px")
